"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[112],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=i,y=u["".concat(s,".").concat(d)]||u[d]||m[d]||r;return n?a.createElement(y,o(o({ref:t},p),{},{components:n})):a.createElement(y,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1603:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={sidebar_position:4},s="Types specifications",c={unversionedId:"language/type-specifications",id:"language/type-specifications",isDocsHomePage:!1,title:"Types specifications",description:"OCaml types can be annotated with Gospel specifications in order to model their",source:"@site/docs/language/type-specifications.md",sourceDirName:"language",slug:"/language/type-specifications",permalink:"/gospel/language/type-specifications",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Terms and Formulae",permalink:"/gospel/language/formulae"},next:{title:"Constants specifications",permalink:"/gospel/language/constants-specifications"}},p=[{value:"Models",id:"models",children:[],level:2},{value:"Mutable types",id:"mutable-types",children:[],level:2},{value:"Invariants",id:"invariants",children:[],level:2}],m={toc:p};function u(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"types-specifications"},"Types specifications"),(0,r.kt)("p",null,"OCaml types can be annotated with Gospel specifications in order to model their\ncontents and express invariants. Consider the following example of a container\ndata-structure."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml"},"type 'a t\n(*@ model capacity: int\n    mutable model contents: 'a Set.t\n    invariant Set.cardinal contents <= capacity *)\n")),(0,r.kt)("p",null,"The specification of this type contains three elements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the first two lines are models. They represent the type ",(0,r.kt)("inlineCode",{parentName:"li"},"t")," in the logical\ndomain. ",(0,r.kt)("inlineCode",{parentName:"li"},"capacity")," is an immutable model of type ",(0,r.kt)("inlineCode",{parentName:"li"},"int")," representing the\nmaximum length of the data-structure, and ",(0,r.kt)("inlineCode",{parentName:"li"},"contents")," is a mutable set\nrepresenting its contents. Note that ",(0,r.kt)("inlineCode",{parentName:"li"},"Set.t")," references a logical set\nprovided by Gospel standard library. Models do not give any information on\nthe actual implementation of ",(0,r.kt)("inlineCode",{parentName:"li"},"t"),"."),(0,r.kt)("li",{parentName:"ul"},"the last line is a clause denoting a type invariant. At all times, values of\ntype ",(0,r.kt)("inlineCode",{parentName:"li"},"t")," should contain less elements that their maximum capacity.")),(0,r.kt)("p",null,"Types specifications can contain models, invariants, and mutability information."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ebnf",metastring:'title="Type specification syntax"',title:'"Type',specification:!0,'syntax"':!0},'type_specification = type-specification-clause*\ntype_specification_clause =\n  "ephemeral"\n  | "mutable"? "model" identifier ":" type_expression\n  | "invariant" expr\n')),(0,r.kt)("h2",{id:"models"},"Models"),(0,r.kt)("p",null,"Type models are logical projections of OCaml types. They help specify the type\ninvariants and contents at several locations of the program, without actually\nexposing them and leaking implementations details."),(0,r.kt)("p",null,"The keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"model")," is used to introduce a new model. It may be preceded by the\nkeyword ",(0,r.kt)("inlineCode",{parentName:"p"},"mutable")," to denote that the model may be mutated during the execution\nof the program, e.g. by a function call. It is then followed by a type annotated\nname for that model, in a fashion similar to OCaml's record fields."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"{2,3}","{2,3}":!0},"type 'a t\n(*@ model capacity: int\n    mutable model contents: 'a Set.t\n    invariant Set.cardinal contents <= capacity *)\n")),(0,r.kt)("h2",{id:"mutable-types"},"Mutable types"),(0,r.kt)("p",null,"Gospel lets you specify when a type may contain some mutable state by using the\nkeyword ",(0,r.kt)("inlineCode",{parentName:"p"},"ephemeral")," in its annotation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"{3}","{3}":!0},"type t\n(*@ model capacity: int\n    ephemeral *)\n")),(0,r.kt)("p",null,"Of course, a type that has a mutable model is considered mutable, so the\n",(0,r.kt)("inlineCode",{parentName:"p"},"ephemeral")," may be omitted whenever at least one declared model is mutable."),(0,r.kt)("h2",{id:"invariants"},"Invariants"),(0,r.kt)("p",null,"Type annotations may also contain invariants that hold at every entry and exit\npoint of every fonction that manipulates their values. Formulae expressing these\nproperties may be added after the ",(0,r.kt)("inlineCode",{parentName:"p"},"invariant")," keyword:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"{4}","{4}":!0},"type 'a t\n(*@ model capacity: int\n    mutable model contents: 'a Set.t\n    invariant Set.cardinal contents <= capacity *)\n")),(0,r.kt)("p",null,"Note that functions may break these invariants internally, but must restore them\nso that they still hold at the function exit."))}u.isMDXComponent=!0}}]);