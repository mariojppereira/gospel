"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[480],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=i,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5422:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),r=["components"],s={sidebar_position:6},l="Function contracts",c={unversionedId:"language/function-contracts",id:"language/function-contracts",isDocsHomePage:!1,title:"Function contracts",description:"A function contract is a formal Gospel specification attached to the declaration",source:"@site/docs/language/function-contracts.md",sourceDirName:"language",slug:"/language/function-contracts",permalink:"/gospel/language/function-contracts",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Constants specifications",permalink:"/gospel/language/constants-specifications"},next:{title:"Logical declarations",permalink:"/gospel/language/logical"}},p=[{value:"Default behaviour",id:"default-behaviour",children:[],level:2},{value:"Pre-conditions",id:"pre-conditions",children:[{value:"<code>requires</code>",id:"requires",children:[],level:3},{value:"<code>checks</code>",id:"checks",children:[],level:3}],level:2},{value:"Post-conditions",id:"post-conditions",children:[],level:2},{value:"Exceptional post-conditions",id:"exceptional-post-conditions",children:[],level:2},{value:"Code equivalence",id:"code-equivalence",children:[],level:2},{value:"Non termination",id:"non-termination",children:[],level:2},{value:"Data mutability",id:"data-mutability",children:[],level:2},{value:"Pure functions",id:"pure-functions",children:[],level:2},{value:"Data consumption",id:"data-consumption",children:[],level:2},{value:"Ghost parameters",id:"ghost-parameters",children:[],level:2}],d={toc:p};function m(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"function-contracts"},"Function contracts"),(0,o.kt)("p",null,"A function contract is a formal Gospel specification attached to the declaration\nof an OCaml function in an interface. Here is an example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},"val euclidean_division: int -> int -> int * int\n(*@ q, r = euclidean_division x y\n    requires y > 0\n    ensures  x = q * y + r\n    ensures  0 <= r < y *)\n")),(0,o.kt)("p",null,"A function contract is composed of two parts:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The first line is the ",(0,o.kt)("strong",{parentName:"li"},"header")," of the contract; it names the function\narguments and result. It must appear at the beginning of the contract."),(0,o.kt)("li",{parentName:"ul"},"The next lines contain as many specification ",(0,o.kt)("inlineCode",{parentName:"li"},"clauses")," as needed. The\nprevious example features three clauses: one pre-condition introduced by\n",(0,o.kt)("inlineCode",{parentName:"li"},"requires"),", and two post-conditions introduced by ",(0,o.kt)("inlineCode",{parentName:"li"},"ensures"),".")),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"   In the absence of a contract attached to a function declaration, you cannot\nmake any assumptions about its behaviour."),(0,o.kt)("p",{parentName:"div"},"   Post-Conditions may not hold, the function may diverge, raise unlisted\nexceptions, modify mutable states. However, ",(0,o.kt)("strong",{parentName:"p"},"it still cannot break any type\ninvariant.")),(0,o.kt)("p",{parentName:"div"},"   You can still enable the default implicit properties about exceptions, mutability,\nnon-termination, etc. by creating an empty contract:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},"val euclidean_division: int -> int -> int * int\n(*@ q, r = euclidean_division x y *)\n")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ebnf",metastring:'title="Function contract syntax"',title:'"Function',contract:!0,'syntax"':!0},'contract = header? clause*\nheader = (identifier_tuple "=")? identifier parameter+\nclause = "requires" formula\n       | "checks" formula\n       | "ensures" formula\n       | "raises" exception_case ("|" exception-case)*\n       | "modifies" expr ("," expr)*\n       | "equivalent" string_literal\n       | "diverges"\n       | "pure"\n       | "consumes" expr ("," expr)*\nexception_case = qualid "->" formula\n               | qualid pattern "->" formula\n               | qualid\nidentifier_tuple = identifier ("," identifier)*\nparameter = "()" | identifier | "~" identifier | "?" identifier\n')),(0,o.kt)("h2",{id:"default-behaviour"},"Default behaviour"),(0,o.kt)("p",null,"To avoid boilerplate for usual properties, Gospel applies a default contract\nwhenever a function contains has a specification attached. Of course, any\nexplicitly declared clause overrides this implicit contract."),(0,o.kt)("p",null,"When a function has a contract attached, the default contract contains the\nfollowing properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The function ",(0,o.kt)("strong",{parentName:"li"},"terminates"),"."),(0,o.kt)("li",{parentName:"ul"},"The function ",(0,o.kt)("strong",{parentName:"li"},"does not raise any exception")," other than ",(0,o.kt)("inlineCode",{parentName:"li"},"Stack_overflow")," or\n",(0,o.kt)("inlineCode",{parentName:"li"},"Out_of_memory"),"."),(0,o.kt)("li",{parentName:"ul"},"The function ",(0,o.kt)("strong",{parentName:"li"},"does not have any visible side-effect on the memory"),". In other\nwords, if it mutates some data, this has no observable influence on the values\nin the rest of the program.")),(0,o.kt)("h2",{id:"pre-conditions"},"Pre-conditions"),(0,o.kt)("p",null,"Pre-conditions are ",(0,o.kt)("strong",{parentName:"p"},"properties that hold at the function entry"),". You can use\nthem to describe requirements on the function's inputs, but also possibly on a\nglobal state that exists outside of the function arguments."),(0,o.kt)("p",null,"You can expressed them using the keyword ",(0,o.kt)("inlineCode",{parentName:"p"},"requires")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"checks"),", followed by a\nformula."),(0,o.kt)("h3",{id:"requires"},(0,o.kt)("inlineCode",{parentName:"h3"},"requires")),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"requires")," clause states under which conditions specified function has a\nwell-specified behaviour."),(0,o.kt)("p",null,"Whenever a ",(0,o.kt)("inlineCode",{parentName:"p"},"requires")," pre-condition is violated, its behaviour becomes\nunspecified, and the call should be considered faulty. Even if the function\nexecution terminates, any other information provided by the contract\n(post-conditions, exceptions, effects, ...) cannot be assumed."),(0,o.kt)("p",null,"In our example, the function requires ",(0,o.kt)("inlineCode",{parentName:"p"},"y")," to be positive to behave correctly."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"{3}","{3}":!0},"val eucl_division: int -> int -> int * int\n(*@ q, r = eucl_division x y\n    requires y > 0\n    ensures  x = q * y + r\n    ensures  0 <= r < y *)\n")),(0,o.kt)("h3",{id:"checks"},(0,o.kt)("inlineCode",{parentName:"h3"},"checks")),(0,o.kt)("p",null,"Pre-conditions introduced with ",(0,o.kt)("inlineCode",{parentName:"p"},"checks")," hold at function entry. However, unlike\n",(0,o.kt)("inlineCode",{parentName:"p"},"requires")," clauses, the behaviour of the function is well specified in case the\npre-state does not meet such a pre-condition: the function fails by raising an\nOCaml ",(0,o.kt)("inlineCode",{parentName:"p"},"Invalid_argument")," exception, and does not modify any existing state. The\ncall is not faulty, but the caller is now in charge of handling the exception."),(0,o.kt)("p",null,"The same function contract, where ",(0,o.kt)("inlineCode",{parentName:"p"},"requires")," is replaced with ",(0,o.kt)("inlineCode",{parentName:"p"},"checks"),", states\nthat the function raises ",(0,o.kt)("inlineCode",{parentName:"p"},"Invalid_argument")," whenever ",(0,o.kt)("inlineCode",{parentName:"p"},"y <= 0"),"."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Combining multiple pre-conditions")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Whenever multiple pre-conditions of the same kind coexist, they hold as a\nconjunction, which means"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},"(*@ ...\n    requires P\n    requires Q *)\n")),(0,o.kt)("p",{parentName:"div"},"is equivalent to:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},"(*@ ...\n    requires P /\\ Q *)\n")),(0,o.kt)("p",{parentName:"div"},"When combining ",(0,o.kt)("inlineCode",{parentName:"p"},"checks")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"requires")," pre-conditions, the declaration order\ndoes not matter. The ",(0,o.kt)("inlineCode",{parentName:"p"},"requires")," clauses take precedence and must always be\nrespected; otherwise the ",(0,o.kt)("inlineCode",{parentName:"p"},"checks")," behaviour cannot be assumed. This means that\nultimately,"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},"(*@ ...\n    requires P\n    checks Q *)\n")),(0,o.kt)("p",{parentName:"div"},"is equivalent to:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},"(*@ ...\n    requires P\n    checks P -> Q *)\n")))),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Specification formulas can often be written using few clauses, but splitting the\nspecification into several smaller clauses leads to better readability and\nmaintainability and is encouraged."))),(0,o.kt)("h2",{id:"post-conditions"},"Post-conditions"),(0,o.kt)("p",null,"Post-Conditions are ",(0,o.kt)("strong",{parentName:"p"},"properties that hold at the function exit"),". They are used\nto specify how the function's outputs relate to its inputs and how the call\nmutated the memory."),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"  ",(0,o.kt)("strong",{parentName:"p"},"When a function raises an exception, its post-conditions are not expected to\nhold.")," You must use exceptional post-conditions instead."))),(0,o.kt)("p",null,"Gospel introduces post-conditions using the keyword ",(0,o.kt)("inlineCode",{parentName:"p"},"ensures"),", followed by a\nformula."),(0,o.kt)("p",null,"As discussed in the previous section, the property expressed by the formula is\nverified after the function call only if the pre-conditions were satisfied."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Combining multiple post-conditions")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The handling of multiple post-conditions is identical to pre-conditions of the\nsame kind: multiple post-conditions are merged as a conjunction:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},"(*@ ...\n    ensures P\n    ensures Q *)\n")),(0,o.kt)("p",{parentName:"div"},"is equivalent to:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},"(*@ ...\n    ensures P /\\ Q *)\n")))),(0,o.kt)("h2",{id:"exceptional-post-conditions"},"Exceptional post-conditions"),(0,o.kt)("p",null,"Exceptional post-conditions are used to specify the exceptions that can be\nraised by the function, and what post-conditions hold in those cases."),(0,o.kt)("p",null,"By default, functions should not raise any exceptions, and doing so is a\nviolation of the specification. Whenever a function can raise an exception as\npart of its expected behaviour, this exception must be listed, along with the\nassociated post-conditions."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Some exceptions are implicitly allowed and do not have to be listed, because\nthey could be unexpectedly triggered depending on the specifics of the machine\nthe code is executed on."),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("strong",{parentName:"p"},"The implicitly allowed exceptions are ",(0,o.kt)("inlineCode",{parentName:"strong"},"Stack_overflow")," and ",(0,o.kt)("inlineCode",{parentName:"strong"},"Out_of_memory"),".")),(0,o.kt)("p",{parentName:"div"},"This is equivalent to adding a ",(0,o.kt)("inlineCode",{parentName:"p"},"raises Out_of_memory | Stack_overflow -> true"),"\nclause to every function contract. Of course, you can still override that\nbehaviour by stating a property whenever these exceptions are raised, like any\nother exception:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},"(*@ ...\n    raises Stack_overflow -> false *)\n")))),(0,o.kt)("p",null,"Exceptional clauses are expressed using a ",(0,o.kt)("inlineCode",{parentName:"p"},"raises")," keyword, followed by a list\nof cases associating each exception with its formula, with a syntax similar to\npattern-matching."),(0,o.kt)("p",null,"Gospel expects each ",(0,o.kt)("inlineCode",{parentName:"p"},"raises")," clause to perform an exhaustive pattern matching\nfor each exception constructor listed in this clause. Similarly to OCaml's\npattern-matching, when an exception is raised, the post-condition that is\nsatisfied is the first match in the list of the cases."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},"(*@ ...\n    raises Unix_error (ENAMETOOLONG, _, _) -> P\n         | Unix_error _                    -> Q *)\n")),(0,o.kt)("p",null,"In the previous contract (notice that it is an exhaustive pattern-matching on\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"Unix_error")," exception) only states that ",(0,o.kt)("inlineCode",{parentName:"p"},"P")," holds whenever ",(0,o.kt)("inlineCode",{parentName:"p"},"Unix_error")," is\nraised with argument ",(0,o.kt)("inlineCode",{parentName:"p"},"ENAMETOOLONG"),", and that ",(0,o.kt)("inlineCode",{parentName:"p"},"Q")," holds whenever the function\nraises ",(0,o.kt)("inlineCode",{parentName:"p"},"Unix_error")," with a different argument (",(0,o.kt)("inlineCode",{parentName:"p"},"P")," does not necessarily hold in\nthis case)."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Combining multiple exceptional post-conditions")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"When multiple exceptional post-conditions exist, they are hold independently of\neach other, meaning that the raised exception is matched against each ",(0,o.kt)("inlineCode",{parentName:"p"},"raises"),"'s\ncase list, and each matching post-condition must hold in conjunction. For\ninstance, the contract:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},'(*@ ...\n    raises Error "foo" -> P | Error _ -> Q\n    raises Error x -> R *)\n')),(0,o.kt)("p",{parentName:"div"},"implies that"),(0,o.kt)("ul",{parentName:"div"},(0,o.kt)("li",{parentName:"ul"},"when ",(0,o.kt)("inlineCode",{parentName:"li"},'Error "foo"')," is raised, both ",(0,o.kt)("inlineCode",{parentName:"li"},"P")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"R")," hold, but not necessarily ",(0,o.kt)("inlineCode",{parentName:"li"},"Q"),";"),(0,o.kt)("li",{parentName:"ul"},"when ",(0,o.kt)("inlineCode",{parentName:"li"},"Error")," is raised with with an argument different from ",(0,o.kt)("inlineCode",{parentName:"li"},'"foo"'),", both ",(0,o.kt)("inlineCode",{parentName:"li"},"Q"),"\nand ",(0,o.kt)("inlineCode",{parentName:"li"},"R")," hold, but not necessarily ",(0,o.kt)("inlineCode",{parentName:"li"},"P"),".")))),(0,o.kt)("h2",{id:"code-equivalence"},"Code equivalence"),(0,o.kt)("p",null,"Complementary to other specification clauses, Gospel allows you to talk about\n",(0,o.kt)("em",{parentName:"p"},"code equivalence")," in the function contract. It consists in a string containing\nthe OCaml code the function behaves like, preceded by the ",(0,o.kt)("inlineCode",{parentName:"p"},"equivalent")," keyword."),(0,o.kt)("p",null,"This is useful when specifying functions which behaviour can hardly be expressed\nin pure logic:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},"val iter : ('a -> unit) -> 'a t -> unit\n(*@ iter f t\n    equivalent \"List.iter f (to_list t)\" *)\n")),(0,o.kt)("p",null,"With such a specification, no logical assertion is provided, but applying ",(0,o.kt)("inlineCode",{parentName:"p"},"iter"),"\nto ",(0,o.kt)("inlineCode",{parentName:"p"},"f")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"t")," is equivalent to applying ",(0,o.kt)("inlineCode",{parentName:"p"},"List.iter")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"f"),", and the conversion\nof ",(0,o.kt)("inlineCode",{parentName:"p"},"t")," to a list. This does not leak implementation details, as ",(0,o.kt)("inlineCode",{parentName:"p"},"iter")," might in\nfact be implemented in a different, more efficient way. It does however make the\nspecification concise and elegant."),(0,o.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"danger")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"At the moment, the Gospel type-checker does ",(0,o.kt)("strong",{parentName:"p"},"not")," type-check the code provided\ninside the ",(0,o.kt)("inlineCode",{parentName:"p"},"equivalent")," clauses, and will take it as-is."))),(0,o.kt)("h2",{id:"non-termination"},"Non termination"),(0,o.kt)("p",null,"By default, OCaml functions with attached contract implicitly terminate."),(0,o.kt)("p",null,"If a function is allowed to not terminate (e.g. a server main loop, a function\nwaiting for a signal or event, etc.), one can add this information to the\ncontract using the ",(0,o.kt)("inlineCode",{parentName:"p"},"diverges")," keyword."),(0,o.kt)("p",null,"The following example states that the execution of the function ",(0,o.kt)("inlineCode",{parentName:"p"},"run")," may not\nterminate. It does not specify whether this function is always non-terminating\nor not."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},"val run : unit -> unit\n(*@ run ()\n    diverges *)\n")),(0,o.kt)("h2",{id:"data-mutability"},"Data mutability"),(0,o.kt)("p",null,"In the default specification, functions do not mutate any observable data. If\nyour function mutates an argument or some global state, you may specify it using\nthe keyword ",(0,o.kt)("inlineCode",{parentName:"p"},"modifies"),", followed by an identifier. In the following, the\n",(0,o.kt)("inlineCode",{parentName:"p"},"contents")," model of ",(0,o.kt)("inlineCode",{parentName:"p"},"a")," can be modified by ",(0,o.kt)("inlineCode",{parentName:"p"},"inplace_map"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"{3}","{3}":!0},"val inplace_map : ('a -> 'a) -> 'a t -> unit\n(*@ inplace_map f a\n    modifies a.contents *)\n")),(0,o.kt)("p",null,"If the function only modifies a few models of a value, these may be explicitly\nadded to the clause."),(0,o.kt)("p",null,"If a specific model is not mentioned, the whole data-structure and its mutable\nmodels are potentially mutated."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"{3}","{3}":!0},"val inplace_map : ('a -> 'a) -> 'a t -> unit\n(*@ inplace_map f a\n    modifies a *)\n")),(0,o.kt)("p",null,"In this example, all the mutable models of ",(0,o.kt)("inlineCode",{parentName:"p"},"a")," can be mutated by ",(0,o.kt)("inlineCode",{parentName:"p"},"inplace_map"),"."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"When a ",(0,o.kt)("inlineCode",{parentName:"p"},"modifies")," clause is present, it affects all the declared post-conditions\nand exceptional post-conditions, meaning that the function may mutate data even\nin the case of exceptional post-conditions."),(0,o.kt)("p",{parentName:"div"},"If your data was not mutated in an exceptional post-state, for instance if the\nfunction raised an exception ",(0,o.kt)("strong",{parentName:"p"},"instead")," of mutating the data, you have to\nmanually specify it:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"{4}","{4}":!0},"val inplace_map : ('a -> 'a) -> 'a t -> unit\n(*@ inplace_map f a\n    modifies a.contents\n    raises E -> a.contents = old (a.contents) *)\n")))),(0,o.kt)("h2",{id:"pure-functions"},"Pure functions"),(0,o.kt)("p",null,"An OCaml function can be declared as ",(0,o.kt)("inlineCode",{parentName:"p"},"pure"),", which means"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"it has no side effect;"),(0,o.kt)("li",{parentName:"ul"},"it raises no exception;"),(0,o.kt)("li",{parentName:"ul"},"it terminates.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"{2}","{2}":!0},"val length : 'a t -> int\n(*@ pure *)\n")),(0,o.kt)("p",null,"Pure functions can be used in further Gospel specifications.\nOn the contrary, OCaml functions not declared as ",(0,o.kt)("inlineCode",{parentName:"p"},"pure")," cannot be used\nin specifications."),(0,o.kt)("h2",{id:"data-consumption"},"Data consumption"),(0,o.kt)("p",null,"Gospel provides a specific syntax to specify that some data has been consumed by\nthe function, and should be considered dirty \u2014 that is, not be used anymore \u2014 in\nthe rest of the program."),(0,o.kt)("h2",{id:"ghost-parameters"},"Ghost parameters"),(0,o.kt)("p",null,"Functions can take or return ghost values to ease the writing of function\ncontracts. Such values appear within brackets in the contract header."),(0,o.kt)("p",null,"Let us consider the following ",(0,o.kt)("inlineCode",{parentName:"p"},"log2")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},"val log2: int -> int\n(*@ r = log2 [i: integer] x\n    requires i >= 0\n    requires x = pow 2 i\n    ensures r = i *)\n")),(0,o.kt)("p",null,"In this contract, the ghost parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"i")," is used in both the pre- and\npostcondition. By introducing it as a ghost value, we avoid using quantifiers to\nstate the existence of ",(0,o.kt)("inlineCode",{parentName:"p"},"i"),"."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Since the type of ghost parameters does not appear in the OCaml signature, it\nmust be given explicitly."))))}m.isMDXComponent=!0}}]);