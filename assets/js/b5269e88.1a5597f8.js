"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[934],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(f,r(r({ref:t},p),{},{components:n})):a.createElement(f,r({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7484:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),r=["components"],l={sidebar_position:1},s="Specification locations",c={unversionedId:"language/locations",id:"language/locations",isDocsHomePage:!1,title:"Specification locations",description:"General conventions",source:"@site/docs/language/locations.md",sourceDirName:"language",slug:"/language/locations",permalink:"/gospel/language/locations",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Union-find",permalink:"/gospel/walkthroughs/union-find"},next:{title:"Lexical conventions",permalink:"/gospel/language/lexical-conventions"}},p=[{value:"General conventions",id:"general-conventions",children:[{value:"Floating attributes",id:"floating-attributes",children:[],level:3},{value:"Attached attributes",id:"attached-attributes",children:[],level:3},{value:"Specification of ghost and logical declarations",id:"specification-of-ghost-and-logical-declarations",children:[],level:3}],level:2},{value:"Gospel preprocessor",id:"gospel-preprocessor",children:[],level:2},{value:"Specifications and documentation comments",id:"specifications-and-documentation-comments",children:[],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"specification-locations"},"Specification locations"),(0,o.kt)("h2",{id:"general-conventions"},"General conventions"),(0,o.kt)("p",null,"Gospel annotations are written in interface files (",(0,o.kt)("inlineCode",{parentName:"p"},".mli"),")."),(0,o.kt)("p",null,"We use ",(0,o.kt)("a",{parentName:"p",href:"https://caml.inria.fr/pub/docs/manual-ocaml/attributes.html"},"OCaml\nattributes")," with\nthe identifier ",(0,o.kt)("inlineCode",{parentName:"p"},"gospel")," to bear the Gospel specifications in their payload, as\nstrings: ",(0,o.kt)("inlineCode",{parentName:"p"},'[@@gospel "<spec>"]')," and ",(0,o.kt)("inlineCode",{parentName:"p"},'[@@@gospel "<spec>"]'),"."),(0,o.kt)("h3",{id:"floating-attributes"},"Floating attributes"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/gospel/language/logical"},"Ghost and logical declarations")," must lie in floating attributes,\ninside module signatures:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},'[@@@gospel "val f : int -> int"]\n[@@@gospel "predicate is_zero (x: integer) = x = 0"]\n')),(0,o.kt)("h3",{id:"attached-attributes"},"Attached attributes"),(0,o.kt)("p",null,"Specification bits which are semantically attached to OCaml declarations (e.g.\n",(0,o.kt)("a",{parentName:"p",href:"/gospel/language/function-contracts"},"function contracts")," or ",(0,o.kt)("a",{parentName:"p",href:"/gospel/language/type-specifications"},"type\nspecifications"),") should be written in an attached\nattribute, following OCaml's attachement rules:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},'val f: int -> int\n[@@gospel "y = f x ensures x > 0"]\n')),(0,o.kt)("h3",{id:"specification-of-ghost-and-logical-declarations"},"Specification of ghost and logical declarations"),(0,o.kt)("p",null,"When ghost and logical declarations need to be specified with a contract, the\ncontract should reside in an attribute attached to the string containing the\ndeclaration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},'[@@@gospel "val f : int -> int"\n  [@@gospel "y = f x ensures x > 0"]]\n')),(0,o.kt)("h2",{id:"gospel-preprocessor"},"Gospel preprocessor"),(0,o.kt)("p",null,"Writing attributes is tedious, especially when nested. Gospel provides a\npreprocessor that lets you write Gospel specifications in special comments,\nstarting with the ",(0,o.kt)("inlineCode",{parentName:"p"},"@")," character",(0,o.kt)("sup",{parentName:"p",id:"fnref-1"},(0,o.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},"val f: int -> int           (* An OCaml value declaration *)\n(*@ y = f x         \n    ensures x > 0 *)        (* Its Gospel specification   *)\n\n(*@ type t *)               (* A ghost type declaration   *)\n(*@ ephemeral         \n    model size: int *)      (* Its Gospel specification   *)      \n")),(0,o.kt)("p",null,"Although the preprocessor is available via the ",(0,o.kt)("inlineCode",{parentName:"p"},"gospel pps")," command, it is also\napplied automatically on type-checking, so you should not have to worry about\nmanually applying it."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The special ",(0,o.kt)("inlineCode",{parentName:"p"},"(*@ ... *)")," comment notation will be used throughout the\ndocumentation, and the attribute notation will not appear anymore."))),(0,o.kt)("h2",{id:"specifications-and-documentation-comments"},"Specifications and documentation comments"),(0,o.kt)("p",null,"Note that Gospel annotations can be combined with traditional documentation\ncomments, ",(0,o.kt)("em",{parentName:"p"},"e.g.")," as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},"val eucl_division: int -> int -> int * int\n(** this is an implementation of Euclidean division *)\n(*@ q, r = eucl_division x y \n    ... *)\n")),(0,o.kt)("div",{className:"footnotes"},(0,o.kt)("hr",{parentName:"div"}),(0,o.kt)("ol",{parentName:"div"},(0,o.kt)("li",{parentName:"ol",id:"fn-1"},"Existing specification languages for other host languages introduced this\nnotation, ",(0,o.kt)("em",{parentName:"li"},"e.g.")," ",(0,o.kt)("a",{parentName:"li",href:"https://www.cs.ucf.edu/~leavens/JML/index.shtml"},"JML")," for\nJava and ",(0,o.kt)("a",{parentName:"li",href:"https://frama-c.com/html/acsl.html"},"ACSL")," for C. Hence Gospel\nalso uses this convention.",(0,o.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")))))}d.isMDXComponent=!0}}]);